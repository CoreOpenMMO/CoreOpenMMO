root                                                                     = true

[*.cs]
#--------------------------------------------------------------------------------------------#
# Naming Conventions
#--------------------------------------------------------------------------------------------#

# Const definitions
dotnet_naming_rule.const_definition.symbols 									= const_definition_symbols
dotnet_naming_rule.const_definition.style										= const_definition_style
dotnet_naming_rule.const_definition.severity									= error
dotnet_naming_symbols.const_definition_symbols.required_modifiers 				= const
dotnet_naming_symbols.const_definition_symbols.applicable_kinds          		= *
dotnet_naming_style.const_definition_style.capitalization						= pascal_case

# interface definitions
dotnet_naming_rule.interface_definition.symbols 								= interface_definition_symbols
dotnet_naming_rule.interface_definition.style									= interface_definition_style
dotnet_naming_rule.interface_definition.severity								= error
dotnet_naming_symbols.interface_definition_symbols.applicable_kinds          	= interface
dotnet_naming_symbols.interface_definition_symbols.applicable_accessibilities	= *
dotnet_naming_style.interface_definition_style.capitalization					= pascal_case
dotnet_naming_style.interface_definition_style.required_prefix					= I

# Type definitions
dotnet_naming_rule.type_definition.symbols 										= type_definition_symbols
dotnet_naming_rule.type_definition.style										= type_definition_style
dotnet_naming_rule.type_definition.severity										= error
dotnet_naming_symbols.type_definition_symbols.applicable_kinds          		= class, struct, interface, enum
dotnet_naming_symbols.type_definition_symbols.applicable_accessibilities		= *
dotnet_naming_style.type_definition_style.capitalization						= pascal_case

# Methods
dotnet_naming_rule.method_definition.symbols 									= method_definition_symbols
dotnet_naming_rule.method_definition.style										= method_definition_style
dotnet_naming_rule.method_definition.severity									= error
dotnet_naming_symbols.method_definition_symbols.applicable_kinds          		= method
dotnet_naming_symbols.method_definition_symbols.applicable_accessibilities		= *
dotnet_naming_style.method_definition_style.capitalization						= pascal_case

# Public accessibility
dotnet_naming_rule.public.symbols 									= public_symbols
dotnet_naming_rule.public.style										= public_style
dotnet_naming_rule.public.severity									= error
dotnet_naming_symbols.public_symbols.applicable_kinds              	= *
dotnet_naming_symbols.public_symbols.applicable_accessibilities		= public
dotnet_naming_style.public_style.capitalization						= pascal_case

# Not-public accessibility
dotnet_naming_rule.private.symbols 									= private_symbols
dotnet_naming_rule.private.style									= private_style
dotnet_naming_rule.private.severity									= error
dotnet_naming_symbols.private_symbols.applicable_kinds             	= *
dotnet_naming_symbols.private_symbols.applicable_accessibilities	= internal, private, protected, protected_internal, protected_friend
dotnet_naming_style.private_style.capitalization					= camel_case
dotnet_naming_style.private_style.required_prefix					= _

# Parameters
dotnet_naming_rule.parameter_rule.symbols							= parameter_symbols
dotnet_naming_rule.parameter_rule.style								= parameter_style
dotnet_naming_rule.parameter_rule.severity							= error
dotnet_naming_symbols.parameter_symbols.applicable_kinds			= *
dotnet_naming_style.parameter_style.capitalization					= camel_case

#-------------------------------------------------------------------------------# 
# Coding conventions
#-------------------------------------------------------------------------------#

# Require accessibility modifier
dotnet_style_require_accessibility_modifiers 	= always : error
csharp_preferred_modifier_order					= public, private, protected, internal, static, extern, new, virtual, abstract, sealed, override, readonly, unsafe, volatile, async : suggestion

#Inlined variable declarations
csharp_style_inlined_variable_declaration		= true : error

# Requests "this." and "Me." when applicable
dotnet_style_qualification_for_field			= false : error
dotnet_style_qualification_for_property			= false : error
dotnet_style_qualification_for_method			= false : error
dotnet_style_qualification_for_event			= false : error

# Prefer "var" everywhere
# csharp_style_var_for_built_in_types			= false : none
csharp_style_var_when_type_is_apparent			= true : error
# csharp_style_var_elsewhere					= true : error

# Prefer method-like constructs to have a block body
csharp_style_expression_bodied_method			= when_on_single_line : error
csharp_style_expression_bodied_constructors		= false : error
csharp_style_expression_bodied_operators		= when_on_single_line : error
csharp_style_expression_bodied_properties		= false : error
csharp_style_expression_bodied_properties		= false : error
csharp_style_expression_bodied_operators		= when_on_single_line : error

# Prefer property-like constructs to have an expression-body
csharp_style_expression_bodied_properties		= true : none
csharp_style_expression_bodied_indexers			= true : none
csharp_style_expression_bodied_accessors		= true : none

# Spacing
csharp_space_after_cast                                                 	= true : error
csharp_space_after_colon_in_inheritance_clause                          	= true : error
csharp_space_after_comma                                                	= true : error
csharp_space_after_dot                                                  	= false : error
csharp_space_after_keywords_in_control_flow_statements                  	= true : error
csharp_space_after_semicolon_in_for_statement                           	= true : error
csharp_space_around_binary_operators                                    	= before_and_after : error
csharp_space_around_declaration_statements                              	= do_not_ignore : error
csharp_space_before_colon_in_inheritance_clause                         	= true : error
csharp_space_before_comma                                               	= false : error
csharp_space_before_dot                                                 	= false : error
csharp_space_before_open_square_brackets                                	= false : error
csharp_space_before_semicolon_in_for_statement                          	= false : error
csharp_space_between_empty_square_brackets                              	= false : error
csharp_space_between_method_call_empty_parameter_list_parentheses       	= false : error
csharp_space_between_method_call_name_and_opening_parenthesis           	= false : error
csharp_space_between_method_call_parameter_list_parentheses             	= false : error
csharp_space_between_method_declaration_empty_parameter_list_parentheses	= false : error
csharp_space_between_method_declaration_name_and_open_parenthesis       	= false : error
csharp_space_between_method_declaration_parameter_list_parentheses      	= false : error
csharp_space_between_parentheses                                        	= false : error
csharp_space_between_square_brackets                                    	= false : error

# New line
csharp_new_line_before_open_brace						= none : error
csharp_new_line_before_else								= none : error
csharp_new_line_before_catch							= none : error
csharp_new_line_before_finally							= none : error
csharp_new_line_before_members_in_object_initializers	= true : error
csharp_new_line_before_members_in_anonymous_types		= true : error
csharp_new_line_within_query_expression_clauses			= true : error

# Indentation
csharp_indent_block_contents	= true : error
csharp_indent_braces			= false : error
csharp_indent_case_contents		= true : error
csharp_indent_switch_labels		= true : error
csharp_indent_labels			= flush_left : error

# Basic EditorConfig
indent_style 			= tab
insert_final_newline 	= false
charset 				= utf-8
end_of_line				= lf