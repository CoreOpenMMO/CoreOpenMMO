root                                                                     = true

[*.cs]

#-------------------------------------------------------------------------------# 
# EditorConfig's basic settings
#-------------------------------------------------------------------------------#
indent_style 			= tab
insert_final_newline 	= false
charset 				= utf-8
end_of_line				= lf


#-------------------------------------------------------------------------------# 
# Language conventions
#-------------------------------------------------------------------------------#

# Severity : none, silent, refactoring, suggestion, warning, error

### NET code style settings

# "This." and "Me." qualifiers
dotnet_style_qualification_for_field			= false : error
dotnet_style_qualification_for_property			= false : error
dotnet_style_qualification_for_method			= false : error
dotnet_style_qualification_for_event			= false : error

# Language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_locals_parameters_members	= false : none
dotnet_style_predefined_type_for_member_access				= false : none

# Modifier preferences
dotnet_style_require_accessibility_modifiers	= always : error
csharp_preferred_modifier_order					= public, private, protected, internal, static, extern, new, virtual, abstract, sealed, override, readonly, unsafe, volatile, async : suggestion
visual_basic_preferred_modifier_order			= Partial, Default, Private, Protected, Public, Friend, NotOverridable, Overridable, MustOverride, Overloads, Overrides, MustInherit, NotInheritable, Static, Shared, Shadows, ReadOnly, WriteOnly, Dim, Const,WithEvents, Widening, Narrowing, Custom, Async:none
dotnet_style_readonly_field						= true : error

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators	= false : none
dotnet_style_parentheses_in_other_binary_operators		= false : none
dotnet_style_parentheses_in_other_operators				= false : none
dotnet_style_parentheses_in_relational_binary_operators	= false : none

# Expression-level preferences
dotnet_style_object_initializer										= false : none
dotnet_style_collection_initializer									= false : none
dotnet_style_explicit_tuple_names									= true	: error
dotnet_style_prefer_inferred_tuple_names							= false : none
dotnet_style_prefer_inferred_anonymous_type_member_names			= false : none
dotnet_style_prefer_auto_properties									= true  : error
dotnet_style_prefer_is_null_check_over_reference_equality_method	= true  : error

# "Null" checking preferences
dotnet_style_coalesce_expression 	= true : error
dotnet_style_null_propagation		= true : error

### C# code style settings

# Implicit and explicit types
csharp_style_var_for_built_in_types		= false : none
csharp_style_var_when_type_is_apparent	= true	: error
csharp_style_var_elsewhere				= true  : error

# Expression-bodied members
csharp_style_expression_bodied_methods		= when_on_single_line : error
csharp_style_expression_bodied_constructors	= false : error
csharp_style_expression_bodied_operators	= when_on_single_line : error
csharp_style_expression_bodied_properties	= when_on_single_line : error
csharp_style_expression_bodied_indexers		= when_on_single_line : error
csharp_style_expression_bodied_accessors	= when_on_single_line : error

# Pattern matching
csharp_style_pattern_matching_over_is_with_cast_check	= true : error
csharp_style_pattern_matching_over_as_with_null_check	= true : error

# Inlined variable declarations
csharp_style_inlined_variable_declaration	= true : error

# Expression-level preferences
csharp_prefer_simple_default_expression				= true : error
csharp_style_deconstructed_variable_declaration		= true : error
csharp_style_pattern_local_over_anonymous_function	= true : error

# "Null" checking preferences
csharp_style_throw_expression			= true : error
csharp_style_conditional_delegate_call	= true : error

# Code block preferences
csharp_prefer_braces	= false : error


#--------------------------------------------------------------------------------------------#
# Formatting Conventions
#--------------------------------------------------------------------------------------------#

# Most of the rules for formatting conventions have the following format:
# rule_name = false|true
# You specify either true (prefer this style) or false (do not prefer this style). You do not specify a severity.
# For a few rules, instead of true or false, you specify other values to describe when and where to apply the rule.

### .NET formatting settings
# Organize usings
dotnet_sort_system_directives_first	= true

### C# formatting settings
# Newline options
csharp_new_line_before_open_brace						= none
csharp_new_line_before_else								= none
csharp_new_line_before_catch							= none
csharp_new_line_before_finally							= none
csharp_new_line_before_members_in_object_initializers	= true
csharp_new_line_before_members_in_anonymous_types		= true
csharp_new_line_within_query_expression_clauses			= true

# Indentation options
csharp_indent_case_contents	= false
csharp_indent_switch_labels = true
csharp_indent_labels		= one_less_than_current

# Spacing options
csharp_space_after_cast														= true
csharp_space_after_keywords_in_control_flow_statements						= true
csharp_space_between_method_declaration_parameter_list_parentheses			= false
csharp_space_between_method_call_parameter_list_parentheses					= false
csharp_space_between_parentheses											= false
csharp_space_before_colon_in_inheritance_clause								= false
csharp_space_after_colon_in_inheritance_clause								= true
csharp_space_around_binary_operators										= before_and_after
csharp_space_between_method_declaration_empty_parameter_list_parentheses	= false
csharp_space_between_method_call_name_and_opening_parenthesis				= false
csharp_space_between_method_call_empty_parameter_list_parentheses			= false

# Indentation
csharp_indent_block_contents	= true
csharp_indent_braces			= false
csharp_indent_case_contents		= true
csharp_indent_switch_labels		= true
csharp_indent_labels			= flush_left

Wrapping options
csharp_preserve_single_line_statements	= false
csharp_preserve_single_line_blocks		= true

#--------------------------------------------------------------------------------------------#
# Naming Conventions
#--------------------------------------------------------------------------------------------#

# applicable_kinds = *,namespace,class,struct,interface,enum,property,method,field,event,delegate,parameter,type_parameter,local,local_function
# applicable_accessibilities = *,public,internal or friend,private,protected,protected_internal or protected_friend,local
# required_modifiers = abstract or must_inherit,async,const,readonly,static or shared

# Const fields
dotnet_naming_rule.const_fields.symbols 										= const_fields_symbols
dotnet_naming_rule.const_fields.style											= const_fields_style
dotnet_naming_rule.const_fields.severity										= error
dotnet_naming_symbols.const_fields_symbols.required_modifiers 					= const
dotnet_naming_symbols.const_fields_symbols.applicable_kinds          			= field
dotnet_naming_style.const_fields_style.capitalization							= pascal_case

# Interface definitions
dotnet_naming_rule.interface_definition.symbols 								= interface_definition_symbols
dotnet_naming_rule.interface_definition.style									= interface_definition_style
dotnet_naming_rule.interface_definition.severity								= error
dotnet_naming_symbols.interface_definition_symbols.applicable_kinds          	= interface
dotnet_naming_symbols.interface_definition_symbols.applicable_accessibilities	= *
dotnet_naming_style.interface_definition_style.capitalization					= pascal_case
dotnet_naming_style.interface_definition_style.required_prefix					= I

# Type definitions
dotnet_naming_rule.type_definition.symbols 										= type_definition_symbols
dotnet_naming_rule.type_definition.style										= type_definition_style
dotnet_naming_rule.type_definition.severity										= error
dotnet_naming_symbols.type_definition_symbols.applicable_kinds          		= class, struct, interface, enum
dotnet_naming_symbols.type_definition_symbols.applicable_accessibilities		= *
dotnet_naming_style.type_definition_style.capitalization						= pascal_case

# Methods and properties
dotnet_naming_rule.method_definition.symbols 									= method_definition_symbols
dotnet_naming_rule.method_definition.style										= method_definition_style
dotnet_naming_rule.method_definition.severity									= error
dotnet_naming_symbols.method_definition_symbols.applicable_kinds          		= method, properties
dotnet_naming_symbols.method_definition_symbols.applicable_accessibilities		= *
dotnet_naming_style.method_definition_style.capitalization						= pascal_case

# Public stuff
dotnet_naming_rule.public.symbols 									= public_symbols
dotnet_naming_rule.public.style										= public_style
dotnet_naming_rule.public.severity									= error
dotnet_naming_symbols.public_symbols.applicable_kinds              	= namespace, class, struct, interface, enum, property, method, field, event, delegate, type_parameter, local_function
dotnet_naming_symbols.public_symbols.applicable_accessibilities		= public
dotnet_naming_style.public_style.capitalization						= pascal_case

# Non-public fields
dotnet_naming_rule.private.symbols 									= private_symbols
dotnet_naming_rule.private.style									= private_style
dotnet_naming_rule.private.severity									= error
dotnet_naming_symbols.private_symbols.applicable_kinds             	= field
dotnet_naming_symbols.private_symbols.applicable_accessibilities	= internal, private, protected, protected_internal, protected_friend
dotnet_naming_style.private_style.capitalization					= camel_case
dotnet_naming_style.private_style.required_prefix					= _

# Parameters
dotnet_naming_rule.parameter_rule.symbols							= parameter_symbols
dotnet_naming_rule.parameter_rule.style								= parameter_style
dotnet_naming_rule.parameter_rule.severity							= error
dotnet_naming_symbols.parameter_symbols.applicable_kinds			= *
dotnet_naming_style.parameter_style.capitalization					= camel_case

