using CommandLine;
using COTS.GameServer.CommandLineArgumentsParsing;
<<<<<<< HEAD
using COTS.GameServer.Lua;
using System;
using COTS.GameServer.Network;
using COTS.GameServer.Network.Protocols;
using Microsoft.Extensions.DependencyInjection;
using COTS.Infra.CrossCutting.Ioc;
=======
using COTS.GameServer.World.Loading;
using System;
using System.Diagnostics;
using System.IO;
>>>>>>> 8876237859e8831741ae419f4d37a941d2c1bf6b
using System.Threading.Tasks;

namespace COTS.GameServer {

    public sealed class Program {
<<<<<<< HEAD

        private static ServiceProvider _serviceProvider;

        private static void Main(string[] args) {

            var serviceCollection = new ServiceCollection();
            BootStrapper.ConfigureGlobalServices(serviceCollection);
            ConfigureLocalServices(serviceCollection);

            _serviceProvider = serviceCollection.BuildServiceProvider();

            var parser = Parser.Default;
            var parseAttempt = parser.ParseArguments<CommandLineArguments>(args: args);

            if (parseAttempt is Parsed<CommandLineArguments> successfullyParsed) {
                RunWithSucessfullyParsedCommandLineArguments(successfullyParsed.Value);
            }
            else if (parseAttempt is NotParsed<CommandLineArguments> failedAttempt) {
                ReportCommandLineParsingError(failedAttempt);
            }
            else {
                throw new InvalidOperationException("Fo reals? This line should never be reached.");
            }

            Console.ReadLine();
        }

        private static void RunWithSucessfullyParsedCommandLineArguments(CommandLineArguments commandLineArguments) {
            _serviceProvider.GetService<LuaManager>().Run();
            LoginProtocol loginServer = _serviceProvider.GetService<LoginProtocol>();
            GameProtocol gameServer = _serviceProvider.GetService<GameProtocol>();

            //Server Main Loop
            Task.Run(() => loginServer.Listen());
            Task.Run(() => gameServer.Listen());
=======

        private static void Main(string[] args) {
            var watch = new Stopwatch();
            //watch.Start();
            //Items.ItemManager.GetInstance().LoadItems();
            //watch.Stop();
            //Console.WriteLine("[ITEMS] Loaded " + Items.ItemManager.GetInstance().GetSharedItemCount() + " items in " + watch.ElapsedMilliseconds + " ms");

            // var worldBytes = File.ReadAllBytes(@"C:\Source\Otxserver-New-master\data\world\realmap.otbm");
            var worldBytes = File.ReadAllBytes(@"C:\Source\forgottenserver-master\data\world\forgotten.otbm");
            var sw = new Stopwatch();
            sw.Start();
            var parsingTree = WorldLoader.ParseWorld(worldBytes);
            sw.Stop();
            Console.WriteLine("Time to parse world: " + sw.ElapsedMilliseconds + " ms");
            //var root = parsingTree.Root;

            //var worldHeader = WorldLoader.GetWorldHeader(parsingTree);
            //Console.WriteLine($"World encoding: {worldHeader.WorldEncodingVersion}");
            //Console.WriteLine($"World width {worldHeader.WorldWidth}");
            //Console.WriteLine($"World height {worldHeader.WorldHeight}");
            //Console.WriteLine($"Item encoding major version {worldHeader.ItemEncodingMajorVersion}");
            //Console.WriteLine($"Item encoding minor version {worldHeader.ItemEncodingMinorVersion}");

            //var worldAttributes = WorldLoader.GetWorldAttributes(parsingTree);
            //Console.WriteLine($"World description: {worldAttributes.WorldDescription}");
            //Console.WriteLine($"Houses filename: {worldAttributes.HousesFilename}");
            //Console.WriteLine($"Spawns filename: {worldAttributes.SpawnsFilename}");

            //sw.Restart();
            //WorldLoader.LoadWorld(ref parsingTree);
            //sw.Stop();
            //Console.WriteLine("[WORLD] Loaded in " + sw.ElapsedMilliseconds + " ms");

            //Console.WriteLine("Done!!");
            //return;
        }

        private static void RunWithSucessfullyParsedCommandLineArguments(CommandLineArguments commandLineArguments) {
            var clientConnectionManager = commandLineArguments.GetClientConnectionManager();
            Task.Run(() => clientConnectionManager.StartListening());
        }
>>>>>>> 8876237859e8831741ae419f4d37a941d2c1bf6b

            while (true) { 
                loginServer.HandlePendingRequest();
                gameServer.HandlePendingRequest();
            }

            //var clientConnectionManager = commandLineArguments.GetClientConnectionManager();
            //Task.Run(() => clientConnectionManager.StartListening());
        }
<<<<<<< HEAD

        private static void ReportCommandLineParsingError(NotParsed<CommandLineArguments> failedAttempt) => throw new NotImplementedException();

        public static void ConfigureLocalServices(IServiceCollection serviceCollection) {
            serviceCollection.AddTransient<LuaManager>();
            serviceCollection.AddTransient<ConnectionManager>();
            serviceCollection.AddTransient<LoginProtocol>();
            serviceCollection.AddTransient<GameProtocol>();
        }
=======
>>>>>>> 8876237859e8831741ae419f4d37a941d2c1bf6b
    }
}